version: '3.9'

services:

  #################################################################
  # Cassandra Multi-DC Setup
  #################################################################

  cassandra-in:
    image: cassandra:4.1
    container_name: cassandra-in
    environment:
      # Cluster name for all DCs
      CASSANDRA_CLUSTER_NAME: "UniversityCluster"
      # This DC represents India
      CASSANDRA_DC: IN_DC
      # Rack name (can be used for replication placement)
      CASSANDRA_RACK: rack1
      # Use GossipingPropertyFileSnitch for multi-DC awareness
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    ports:
      - "9042:9042"  # Cassandra CQL native port

  cassandra-us:
    image: cassandra:4.1
    container_name: cassandra-us
    environment:
      CASSANDRA_CLUSTER_NAME: "UniversityCluster"
      CASSANDRA_DC: US_DC
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    ports:
      - "9142:9042"  # Remap host port to avoid conflicts

  cassandra-eu:
    image: cassandra:4.1
    container_name: cassandra-eu
    environment:
      CASSANDRA_CLUSTER_NAME: "UniversityCluster"
      CASSANDRA_DC: EU_DC
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    ports:
      - "9242:9042"

  #################################################################
  # Redis Multi-Region Setup (per region caching)
  #################################################################

  redis-in:
    image: redis:7
    container_name: redis-in
    ports:
      - "6379:6379"
    # Optional: mount TLS certs if using SSL
    # volumes:
    #   - ./ssl/redis:/certs
    # command: ["redis-server", "--tls-port", "6379", "--port", "0", "--tls-cert-file", "/certs/redis.crt", "--tls-key-file", "/certs/redis.key", "--tls-ca-cert-file", "/certs/ca.crt"]

  redis-us:
    image: redis:7
    container_name: redis-us
    ports:
      - "6380:6379"

  redis-eu:
    image: redis:7
    container_name: redis-eu
    ports:
      - "6381:6379"

  #################################################################
  # Kafka with Zookeeper (single cluster for simplicity)
  #################################################################

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"

  #################################################################
  # Monitoring Stack
  #################################################################

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

#################################################################
# Volumes for persistent data (optional)
#################################################################
volumes:
  grafana-storage:
  cassandra-in-data:
  cassandra-us-data:
  cassandra-eu-data:
